---
description: AGNO framework, agent architecture
globs: 
alwaysApply: false
---
> You are an expert in AGNO framework, agent architecture, and Python. You focus on building robust, scalable agents with memory, knowledge, tools, and reasoning capabilities using AGNO's comprehensive agent system.

## AGNO Agent Architecture Flow

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   User Input    │    │   Agent Core     │    │   Model Layer   │
│   - Query       │───▶│   - Instructions │───▶│   - LLM API     │
│   - Context     │    │   - Role/Name    │    │   - Claude      │
│   - Parameters  │    │   - Description  │    │   - GPT-4       │
└─────────────────┘    └──────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│ Response Output │    │  Processing      │    │   Tool Layer    │
│ - Formatted     │◀───│  - Memory        │◀───│   - Functions   │
│ - Structured    │    │  - Knowledge     │    │   - APIs        │
│ - Streamed      │    │  - Reasoning     │    │   - Integrations│
└─────────────────┘    └──────────────────┘    └─────────────────┘
```

## Project Structure

```
agno_agent_project/
├── src/
│   ├── agents/                  # Agent implementations
│   │   ├── __init__.py
│   │   ├── base_agent.py        # Base agent class
│   │   ├── chat_agent.py        # Conversational agent
│   │   ├── research_agent.py    # Research-focused agent
│   │   └── task_agent.py        # Task-oriented agent
│   ├── models/                  # Model configurations
│   │   ├── __init__.py
│   │   ├── anthropic_models.py  # Claude configurations
│   │   ├── openai_models.py     # OpenAI configurations
│   │   └── model_factory.py     # Model selection logic
│   ├── tools/                   # Custom tools
│   │   ├── __init__.py
│   │   ├── data_tools.py        # Data processing tools
│   │   ├── api_tools.py         # API integration tools
│   │   └── reasoning_tools.py   # Custom reasoning tools
│   ├── instructions/            # Agent instructions
│   │   ├── __init__.py
│   │   ├── base_instructions.py # Common instructions
│   │   ├── role_instructions.py # Role-specific instructions
│   │   └── output_formats.py    # Output format instructions
│   ├── memory/                  # Memory implementations
│   │   ├── __init__.py
│   │   ├── session_memory.py    # Session-based memory
│   │   ├── persistent_memory.py # Persistent memory
│   │   └── vector_memory.py     # Vector-based memory
│   └── utils/                   # Utilities
│       ├── __init__.py
│       ├── agent_helpers.py     # Agent helper functions
│       ├── response_utils.py    # Response utilities
│       └── debug_utils.py       # Debugging utilities
├── config/                      # Configuration
│   ├── agent_config.py          # Agent configurations
│   ├── model_config.py          # Model settings
│   └── environment.py           # Environment variables
├── tests/                       # Tests
│   ├── __init__.py
│   ├── test_agents.py           # Agent functionality tests
│   ├── test_models.py           # Model integration tests
│   └── test_tools.py            # Tool functionality tests
├── examples/                    # Usage examples
│   ├── basic_agent.py           # Basic agent usage
│   ├── advanced_agent.py        # Advanced features
│   └── multi_agent.py           # Multi-agent systems
├── pyproject.toml               # Dependencies
├── .env                         # Environment variables
└── README.md                    # Documentation
```

# AGNO Agent Architecture Guidelines

AGNO provides a lightweight framework for building agents with memory, knowledge, tools, and reasoning capabilities. Use this guide for creating well-structured agents.

## Basic Agent Structure

```python
from agno.agent import Agent
from agno.models.anthropic import Claude  # Or any other model provider

agent = Agent(
    name="MyAgent",  # Optional but recommended for multi-agent systems
    description="my description"
    role="my role"
    model=Claude(id="claude-3-7-sonnet-latest"),  # Required: The LLM powering the agent
    instructions=[  # Optional: Control agent behavior with specific instructions
        "Use tables to display data",
        "Respond concisely and accurately"
    ],
    expected_output="my expected output"
    markdown=True,  # Optional: Enable markdown formatting in responses
    
)

# Run an agent
response = agent.run("Your query here")
# Or stream the response
agent.print_response("Your query here", stream=True)
```

## Agent Configuration Best Practices

1. **Model Selection**:
   - Choose the most appropriate model for your task based on capabilities and cost
   - AGNO supports 23+ model providers including OpenAI, Anthropic, Google, etc.
   - Always specify model version explicitly for reproducibility

2. **Instructions**:
   - Keep instructions concise and specific
   - Focus on output format and behavioral constraints
   - Limit to 3-5 key directives for best results

3. **Response Format**:
   - Use `markdown=True` for formatted outputs
   - Set `structured_outputs=True` for JSON outputs
   - Define Pydantic models with `response_model=YourModel` for typed responses

4. **Performance Optimization**:
   - Agents instantiate in microseconds and use minimal memory
   - Stream responses when possible for better UX: `stream=True`
   - Use appropriate context window for your model

## Agent with Tools

```python
from agno.agent import Agent
from agno.models.anthropic import Claude
from agno.tools.yfinance import YFinanceTools
from agno.tools.reasoning import ReasoningTools

agent = Agent(
    model=Claude(id="claude-3-7-sonnet-latest"),
    tools=[
        ReasoningTools(add_instructions=True),  # Adds reasoning capabilities
        YFinanceTools(stock_price=True, company_info=True),  # Add tool functionality
    ],
    instructions=[
        "Use tables to display financial data",
        "Include sources in your response"
    ],
    markdown=True,
)
```

## Debug and Tracing

```python
# Enable debug mode to see system prompts, user messages, and tool calls
agent = Agent(
    model=Claude(id="claude-3-7-sonnet-latest"),
    debug_mode=True,  # Show debug information
)

# Alternative: Set environment variable
# export AGNO_DEBUG=true

# View reasoning steps
agent.print_response(
    "Your query",
    stream=True,
    show_full_reasoning=True,  # Show reasoning process
    stream_intermediate_steps=True,  # Stream each step
)
```
