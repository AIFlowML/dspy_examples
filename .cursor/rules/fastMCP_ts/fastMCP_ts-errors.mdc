---
description: FastMCP TypeScript  error handling
globs: 
alwaysApply: false
---
> You are an expert in FastMCP TypeScript framework, focusing on proper error handling, user-friendly error messages, and robust error recovery patterns.

## Error Hierarchy

### Core Error Classes
```typescript
// Use FastMCP's error hierarchy
import { UserError, UnexpectedStateError } from "../FastMCP.js";

// ✅ DO: Extend FastMCP error classes
class ValidationError extends UserError {
  constructor(message: string, public field: string) {
    super(message);
    this.name = "ValidationError";
  }
}

// ✅ DO: Use McpError for protocol-level errors
import { McpError, ErrorCode } from "@modelcontextprotocol/sdk/types.js";
throw new McpError(ErrorCode.MethodNotFound, `Unknown tool: ${toolName}`);
```

### Error Type Guidelines
```typescript
// ✅ DO: Use UserError for user-facing errors
throw new UserError("Invalid configuration: API key is required");

// ✅ DO: Use UnexpectedStateError for system errors
throw new UnexpectedStateError("Server is already connected", { 
  currentState: "connected" 
});

// ✅ DO: Use McpError for MCP protocol errors
throw new McpError(
  ErrorCode.InvalidParams,
  `Tool '${toolName}' parameter validation failed: ${friendlyErrors}`
);
```

## Tool Error Handling

### Parameter Validation Errors
```typescript
// ✅ DO: Provide detailed validation feedback
const parsed = await tool.parameters["~standard"].validate(request.params.arguments);

if (parsed.issues) {
  const friendlyErrors = parsed.issues
    .map((issue) => {
      const path = issue.path?.join(".") || "root";
      return `${path}: ${issue.message}`;
    })
    .join(", ");

  throw new McpError(
    ErrorCode.InvalidParams,
    `Tool '${request.params.name}' parameter validation failed: ${friendlyErrors}`
  );
}
```

### Tool Execution Errors
```typescript
// ✅ DO: Distinguish between user and system errors
try {
  const result = await tool.execute(args, context);
  return result;
} catch (error) {
  if (error instanceof UserError) {
    return {
      content: [{ text: error.message, type: "text" }],
      isError: true,
    };
  }

  // System errors - log details but show generic message to user
  console.error(`[FastMCP] Tool execution failed:`, error);
  const errorMessage = error instanceof Error ? error.message : String(error);
  
  return {
    content: [
      {
        text: `Tool '${request.params.name}' execution failed: ${errorMessage}`,
        type: "text",
      },
    ],
    isError: true,
  };
}
```

### Timeout Handling
```typescript
// ✅ DO: Handle tool timeouts gracefully
const executeToolPromise = tool.execute(args, context);

const result = await (tool.timeoutMs
  ? Promise.race([
      executeToolPromise,
      new Promise<never>((_, reject) => {
        setTimeout(() => {
          reject(
            new UserError(
              `Tool '${request.params.name}' timed out after ${tool.timeoutMs}ms. Consider increasing timeoutMs or optimizing the tool implementation.`
            )
          );
        }, tool.timeoutMs);
      }),
    ])
  : executeToolPromise);
```

## Resource Error Handling

### Resource Loading Errors
```typescript
// ✅ DO: Provide context in resource errors
try {
  maybeArrayResult = await resource.load();
} catch (error) {
  const errorMessage = error instanceof Error ? error.message : String(error);
  throw new McpError(
    ErrorCode.InternalError,
    `Failed to load resource '${resource.name}' (${resource.uri}): ${errorMessage}`,
    { uri: resource.uri }
  );
}
```

### Resource Not Found Handling
```typescript
// ✅ DO: List available resources in error messages
if (!resource) {
  throw new McpError(
    ErrorCode.MethodNotFound,
    `Resource not found: '${request.params.uri}'. Available resources: ${
      resources.map((r) => r.uri).join(", ") || "none"
    }`
  );
}
```

## Session Error Handling

### Connection Error Management
```typescript
// ✅ DO: Handle connection state errors
public async connect(transport: Transport) {
  if (this.#server.transport) {
    throw new UnexpectedStateError("Server is already connected");
  }

  try {
    await this.#server.connect(transport);
  } catch (error) {
    console.error("[FastMCP] Failed to connect:", error);
    throw new UnexpectedStateError(
      "Failed to establish server connection", 
      { originalError: error }
    );
  }
}
```

### Ping Error Handling
```typescript
// ✅ DO: Handle ping failures gracefully without crashing
setInterval(async () => {
  try {
    await this.#server.ping();
  } catch (error) {
    // Don't crash on ping failures - some clients don't respond
    const logLevel = pingConfig.logLevel;
    if (logLevel === "debug") {
      console.debug("[FastMCP debug] server ping failed");
    } else if (logLevel === "warning") {
      console.warn("[FastMCP warning] server is not responding to ping");
    } else if (logLevel === "error") {
      console.error("[FastMCP error] server is not responding to ping");
    }
  }
}, pingConfig.intervalMs);
```

## Error Context and Logging

### Structured Error Context
```typescript
// ✅ DO: Include context in UnexpectedStateError
throw new UnexpectedStateError("Unknown prompt", {
  request,
  availablePrompts: prompts.map(p => p.name)
});

// ✅ DO: Preserve error context through the chain
catch (error) {
  if (error instanceof McpError && error.code === ErrorCode.MethodNotFound) {
    console.debug("[FastMCP debug] listRoots method not supported by client");
  } else {
    console.error(
      `[FastMCP error] received error listing roots.\n\n${
        error instanceof Error ? error.stack : JSON.stringify(error)
      }`
    );
  }
}
```

### Error Logging Patterns
```typescript
// ✅ DO: Use consistent error logging with context
const log = {
  error: (message: string, context?: SerializableValue) => {
    this.#server.sendLoggingMessage({
      data: { context, message },
      level: "error",
    });
  },
  warn: (message: string, context?: SerializableValue) => {
    this.#server.sendLoggingMessage({
      data: { context, message },
      level: "warning",
    });
  }
};

// Usage in tools
log.error("Database connection failed", { 
  database: config.database,
  retryAttempt: attempt 
});
```

## Content Helper Error Handling

### Image/Audio Content Errors
```typescript
// ✅ DO: Handle multiple input types with specific error messages
export const imageContent = async (
  input: { buffer: Buffer } | { path: string } | { url: string }
): Promise<ImageContent> => {
  let rawData: Buffer;

  try {
    if ("url" in input) {
      try {
        const response = await fetch(input.url);
        if (!response.ok) {
          throw new Error(
            `Server responded with status: ${response.status} - ${response.statusText}`
          );
        }
        rawData = Buffer.from(await response.arrayBuffer());
      } catch (error) {
        throw new Error(
          `Failed to fetch image from URL (${input.url}): ${
            error instanceof Error ? error.message : String(error)
          }`
        );
      }
    } else if ("path" in input) {
      try {
        rawData = await readFile(input.path);
      } catch (error) {
        throw new Error(
          `Failed to read image from path (${input.path}): ${
            error instanceof Error ? error.message : String(error)
          }`
        );
      }
    } else {
      throw new Error("Invalid input: Provide a valid 'url', 'path', or 'buffer'");
    }

    // Validate content type with warning, not error
    const mimeType = await fileTypeFromBuffer(rawData);
    if (!mimeType || !mimeType.mime.startsWith("image/")) {
      console.warn(
        `Warning: Content may not be a valid image. Detected MIME: ${
          mimeType?.mime || "unknown"
        }`
      );
    }

    return {
      data: rawData.toString("base64"),
      mimeType: mimeType?.mime ?? "image/png",
      type: "image",
    };
  } catch (error) {
    if (error instanceof Error) {
      throw error; // Re-throw known errors
    } else {
      throw new Error(`Unexpected error processing image: ${String(error)}`);
    }
  }
};
```

## Error Prevention Patterns

### Input Validation
```typescript
// ✅ DO: Validate inputs early with helpful messages
if (!inputData || typeof inputData !== 'object') {
  throw new UserError("Invalid input: Expected an object with required fields");
}

// ✅ DO: Check required arguments with context
for (const arg of prompt.arguments ?? []) {
  if (arg.required && !(args && arg.name in args)) {
    throw new McpError(
      ErrorCode.InvalidRequest,
      `Prompt '${request.params.name}' requires argument '${arg.name}': ${
        arg.description || "No description provided"
      }`
    );
  }
}
```

### State Validation
```typescript
// ✅ DO: Validate server state before operations
if (!this.#server.transport) {
  throw new UnexpectedStateError(
    "Cannot perform operation: Server is not connected"
  );
}

// ✅ DO: Handle missing client capabilities gracefully
if (!this.#clientCapabilities) {
  console.warn("[FastMCP warning] could not infer client capabilities");
  // Proceed with degraded functionality rather than failing
}
```

### Resource Validation
```typescript
// ✅ DO: Validate embedded resource requests
public async embedded(uri: string): Promise<ResourceContent["resource"]> {
  if (!uri || typeof uri !== 'string') {
    throw new UnexpectedStateError("Invalid URI provided for embedded resource");
  }

  // Try direct resource first, then templates
  const directResource = this.#resources.find(resource => resource.uri === uri);
  
  if (directResource) {
    try {
      const result = await directResource.load();
      return this.formatResourceContent(result, directResource, uri);
    } catch (error) {
      throw new UnexpectedStateError(
        `Failed to load embedded resource: ${uri}`, 
        { uri, error }
      );
    }
  }

  // Template matching logic...
  
  throw new UnexpectedStateError(`Resource not found: ${uri}`, { uri });
}
```

## Anti-patterns

### ❌ DON'T: Use generic error types
```typescript
// ❌ DON'T: Throw generic Error for user issues
throw new Error("Something went wrong");

// ✅ DO: Use appropriate error type
throw new UserError("API key is required but not provided");
```

### ❌ DON'T: Swallow errors silently
```typescript
// ❌ DON'T: Silent failures
try {
  await riskyOperation();
} catch (error) {
  // Silent failure - bad!
}

// ✅ DO: Log and handle appropriately
try {
  await riskyOperation();
} catch (error) {
  console.error("[FastMCP] Operation failed:", error);
  throw new UnexpectedStateError("Operation failed", { originalError: error });
}
```

### ❌ DON'T: Leak internal details to users
```typescript
// ❌ DON'T: Expose internal stack traces to users
catch (error) {
  throw new UserError(error.stack); // Internal details leaked
}

// ✅ DO: Provide user-friendly messages
catch (error) {
  console.error("[FastMCP Internal]", error); // Log internally
  throw new UserError("Configuration validation failed. Please check your settings.");
}
```
