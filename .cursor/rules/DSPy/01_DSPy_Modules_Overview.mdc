---
description: DSPy Modules
globs: 
alwaysApply: false
---
> You are an expert in DSPy, the framework for programming—not just prompting—foundation models. You focus on building modular, self-improving AI systems by composing declarative Python code.

## DSPy Modules: The Building Blocks

A **DSPy Module** is a fundamental building block for creating programs that use Language Models (LMs). Each module encapsulates a specific prompting strategy (like Chain of Thought) and has learnable parameters (the prompts and LM weights) that can be tuned by a DSPy optimizer.

Modules are designed to be composed together, allowing you to build complex programs from simple, reusable components. This is directly inspired by how neural network modules work in frameworks like PyTorch.

## Core Module Workflow

The flow for using any module is consistent:
1.  **Declare**: Instantiate the module with a `dspy.Signature`.
2.  **Call**: Invoke the module with the required input arguments.
3.  **Access**: Retrieve the predicted output fields from the result.

```mermaid
graph TD
    A[Define Signature] --> B(Declare Module);
    B --> C{Call Module with Inputs};
    C --> D[Access Prediction Outputs];
```

## Built-in Core Modules

DSPy provides several powerful, pre-built modules that cover common prompting techniques.

| Module | Description | Common Use Case |
| :--- | :--- | :--- |
| `dspy.Predict` | The most basic module. It takes a signature and generates a response. | Simple predictions, classification, and as a base for custom modules. |
| `dspy.ChainOfThought` | Instructs the LM to reason step-by-step before providing the final answer. | Complex questions, reasoning tasks, and improving accuracy. |
| `dspy.ProgramOfThought` | Teaches the LM to generate and execute code to arrive at an answer. | Math problems, symbolic reasoning, and tasks requiring verifiable steps. |
| `dspy.ReAct` | An agent module that can use a set of provided **Tools** to find an answer. | Fact-checking, question answering over external data, interactive tasks. |
| `dspy.MultiChainComparison` | Generates multiple `ChainOfThought` responses and synthesizes the best one. | Reducing variance, improving reliability of complex reasoning. |
| `dspy.majority` | A simple utility function that votes for the most common answer from multiple predictions. | Quick and simple ensemble method for classification or short answers. |

### Basic Usage Example

Swapping modules is often as simple as changing the class name. This allows for rapid experimentation.

```python
import dspy

# A simple question for our modules
question = "What is the main advantage of the DSPy framework?"

# ✅ DO: Use dspy.Predict for straightforward tasks.
predict = dspy.Predict('question -> answer')
response_predict = predict(question=question)
print(f"Predict Answer: {response_predict.answer}")

# ✅ DO: Use dspy.ChainOfThought to encourage reasoning for better quality.
chain_of_thought = dspy.ChainOfThought('question -> answer')
response_cot = chain_of_thought(question=question)
print(f"CoT Answer: {response_cot.answer}")
print(f"CoT Reasoning: {response_cot.reasoning}")

# ❌ DON'T: Use a complex module like ReAct if you don't need external tools.
# Start simple and add complexity only when necessary.
```

## Composing Custom Modules

You can create your own powerful programs by composing built-in modules into a new custom module. This is done by creating a class that inherits from `dspy.Module`.

```python
import dspy

# Assume 'search' is a defined retrieval function
# def search(query: str, k: int) -> list[str]: ...

class RAG(dspy.Module):
    def __init__(self, num_passages=3):
        super().__init__()
        # 1. Declare sub-modules
        self.retrieve = dspy.Retrieve(k=num_passages)
        self.generate_answer = dspy.ChainOfThought("context, question -> answer")

    def forward(self, question):
        # 2. Call sub-modules in sequence
        context = self.retrieve(question).passages
        prediction = self.generate_answer(context=context, question=question)
        return dspy.Prediction(answer=prediction.answer)

# Using the custom composed module
rag_program = RAG()
prediction = rag_program(question="What is DSPy?")
print(prediction.answer)
```

## Best Practices Summary
- **Start Simple**: Begin with `dspy.Predict` or `dspy.ChainOfThought`.
- **Match Module to Task**: Use `dspy.ReAct` for tool use, `dspy.ProgramOfThought` for code generation, etc.
- **Compose for Complexity**: Build custom `dspy.Module` classes to orchestrate complex workflows.
- **Experiment**: The modular design makes it easy to swap out components (e.g., `dspy.Predict` for `dspy.ChainOfThought`) to see what works best.

## References
- [DSPy Modules Documentation](mdc:Users/ilessio/dev-agents/PROJECTS/cursor_rules/extra/dspy/docs/docs/learn/programming/modules.md)
