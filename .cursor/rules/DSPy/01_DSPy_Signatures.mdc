---
description: DSPy Signatures 
globs: 
alwaysApply: false
---
> You are an expert in DSPy, the framework for programming—not just prompting—foundation models. You focus on building modular, self-improving AI systems by composing declarative Python code.

## The Core of DSPy: Signatures

A **Signature** is a declarative specification of a module's input/output behavior. It's the most fundamental building block in DSPy. Instead of crafting complex prompts, you define the *semantic structure* of the task you want the Language Model (LM) to perform.

The DSPy compiler then uses this high-level, declarative signature to generate and optimize the actual prompts (or finetunes) needed to execute the task effectively.

## Signature Architecture Flow

```mermaid
graph TD
    A[Define Task] --> B{Choose Signature Type};
    B --> C[Inline Signature: "input -> output"];
    B --> D[Class-based Signature: class MySig(dspy.Signature)];
    C --> E[Use in dspy.Module];
    D --> E;
    E --> F[Compile with Optimizer];
    F --> G[Optimized Prompt/Finetune];
    G --> H[Execute Program];
```

## Inline Signatures (Simple & Common)

For most common tasks, a simple string is all you need. The format is `"input_field_1, input_field_2 -> output_field_1, output_field_2"`.

### Basic String Signatures

```python
import dspy

# ✅ DO: Use simple, semantically clear strings.
# Question Answering
qa_sig = "question -> answer"

# Summarization
summary_sig = "document -> summary"

# ✅ DO: Add types when the default (string) isn't sufficient.
# Sentiment Classification
sentiment_sig = "sentence -> sentiment: bool"

# ✅ DO: Use multiple inputs and outputs as needed.
# Retrieval-Augmented QA
rag_sig = "context: list[str], question: str -> answer: str"

# Multi-step Reasoning
reasoning_sig = "question, choices -> reasoning, selection: int"

# ❌ DON'T: Over-engineer keywords. "document -> summary" is as good as "long_text -> tldr".
# Let the DSPy compiler handle the optimization.
```

### Signatures with Instructions

You can provide a natural language `instruction` to guide the LM without baking it into the field names.

```python
# ✅ DO: Use the `instructions` keyword to add guidance.
toxicity_signature = dspy.Signature(
    "comment -> toxic: bool",
    instructions="Mark as 'toxic' if the comment includes insults, harassment, or sarcastic derogatory remarks.",
)

toxicity_predictor = dspy.Predict(toxicity_signature)

# ❌ DON'T: Hardcode complex instructions into field names.
# Bad: "comment_to_classify_for_toxicity_insults_or_harassment -> is_toxic_boolean"
```

## Class-based Signatures (Advanced & Verbose)

Use class-based signatures when you need more control, such as adding detailed descriptions for fields or using complex types like `Literal`.

### Defining Class Signatures

```python
from typing import Literal
import dspy

# ✅ DO: Use class-based signatures for detailed tasks.
class EmotionClassification(dspy.Signature):
    """Classify the primary emotion in the given sentence."""

    sentence: str = dspy.InputField(desc="A sentence to classify.")
    emotion: Literal['sadness', 'joy', 'love', 'anger', 'fear', 'surprise'] = dspy.OutputField(
        desc="The dominant emotion conveyed."
    )

# Use the class signature in a module
classify_emotion = dspy.Predict(EmotionClassification)
result = classify_emotion(sentence="I feel ecstatic about this new project!")
print(result.emotion) #-> "joy"

# ❌ DON'T: Use class-based signatures for simple tasks where an inline signature is sufficient.
# Overkill for: "question -> answer"
```

### Complex Field Descriptions

Class-based signatures allow you to add detailed descriptions (`desc`) to input and output fields, which helps the DSPy compiler generate more precise prompts.

```python
# ✅ DO: Add descriptions to clarify the role of each field.
class CheckCitationFaithfulness(dspy.Signature):
    """Verify that the generated text is factually supported by the provided context."""

    context: str = dspy.InputField(desc="A collection of facts that are assumed to be true.")
    text: str = dspy.InputField(desc="A generated statement to be checked against the context.")
    is_faithful: bool = dspy.OutputField(desc="True if all claims in the text are supported by the context.")

# ❌ DON'T: Leave complex fields ambiguous. The `desc` adds critical context for the compiler.
```

## Best Practices Summary

- **Start Simple**: Begin with inline signatures. Only move to class-based signatures when you need the extra descriptive power.
- **Semantic Names**: Use clear, semantic names for your input/output fields (e.g., `question`, `answer`, `document`, `summary`).
- **Trust the Compiler**: Avoid prompt-hacking keywords into your field names. Define the structure and let the optimizer do the heavy lifting.
- **Use Instructions**: For general guidance, use the `instructions` parameter rather than cluttering the signature string itself.

## References
- [DSPy Signatures Documentation](mdc:Users/ilessio/dev-agents/PROJECTS/cursor_rules/extra/dspy/docs/docs/learn/programming/signatures.md)
