---
description: DSPy Saving and Loading Workflow
globs: 
alwaysApply: false
---
> You are an expert in DSPy 3.0. You understand that the goal of compilation is to produce a portable, optimized program that can be saved, versioned, and loaded into a production environment without needing to be re-compiled.

## Saving and Loading Workflow

The typical DSPy workflow separates expensive, offline compilation from efficient, online serving. You compile your program once, save its learned parameters (like few-shot demonstrations and optimized instructions), and then load this lightweight, optimized program into your application.

```
┌─────────────────┐    ┌───────────────────┐    ┌──────────────────┐
│   Compilation   │───▶│   Save Program    │───▶│   Load Program   │
│ (Offline Task)  │    │ (program.save())  │    │(program.load())  │
└─────────────────┘    └───────────────────┘    └──────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌───────────────────┐    ┌──────────────────┐
│   Optimized     │    │   Saved State     │    │   Production     │
│    Program      │    │  (e.g., .json file)│    │     Serving      │
└─────────────────┘    └───────────────────┘    └──────────────────┘
```

## Core Implementation: `.save()` and `.load()`

Every `dspy.Module` has `.save()` and `.load()` methods that handle the serialization of the program's state. This includes the state of all its sub-modules.

### Saving a Compiled Program

After you compile a program, you can save its state to a file. This file will contain the learned few-shot examples and optimized signatures.

```python
import dspy
from dspy.teleprompt import BootstrapFewShot

# 1. Define and compile your program
class MyProgram(dspy.Module):
    def __init__(self):
        super().__init__()
        self.predictor = dspy.ChainOfThought("question -> answer")
    def forward(self, question):
        return self.predictor(question=question)

# ... (optimizer setup and trainset definition) ...
# optimizer = BootstrapFewShot(...)
# compiled_program = optimizer.compile(MyProgram(), trainset=trainset)

# 2. Save the compiled state
# ✅ DO: Save the compiled program to a specific path.
save_path = "./compiled_program.json"
# compiled_program.save(save_path)

print(f"Program saved to {save_path}")
```

### Loading a Program in a Production Environment

In your application code, you can now create a new instance of your program and load the optimized state directly, skipping the expensive compilation step entirely.

```python
import dspy

# In your application file (e.g., app.py)

# 1. Define the program class again
class MyProgram(dspy.Module):
    def __init__(self):
        super().__init__()
        self.predictor = dspy.ChainOfThought("question -> answer")
    def forward(self, question):
        return self.predictor(question=question)

# 2. Create an instance and load the saved state
# ✅ DO: Instantiate the program and then load the state.
production_program = MyProgram()
production_program.load("./compiled_program.json")

# 3. Configure the LM and use the program
# dspy.settings.configure(lm=dspy.OpenAI(model='o3'))
# result = production_program(question="What is the currency of Japan?")

# This `production_program` is now ready to use. It has all the
# few-shot examples and optimized instructions that were learned
# during the offline compilation step.
```

## What Gets Saved?

The `.save()` method serializes the "learnable" parts of your program. This primarily includes:

-   **Few-Shot Demonstrations**: For any `dspy.Predict` or `dspy.ChainOfThought` module, the few-shot examples (the `train` parameter) that were generated by an optimizer like `BootstrapFewShot` are saved.
-   **Updated Signatures**: If you used a signature optimizer like `SignatureOptimizer` or `MIPRO`, the new, improved instructions in your signatures are saved.
-   **Module State**: The state of any other learnable parameters within your modules.

It does **not** save the code for the module itself, nor does it save the language model configuration. You must define the `dspy.Module` class in your code and configure the `dspy.settings` before loading.

## Best Practices Summary

- **Separate Compilation and Serving**: Treat compilation as a build-time or training-time step. Your production environment should only be responsible for loading the pre-compiled, static artifact.
- **Version Your Saved Programs**: Just like you version your code, you should version your compiled program files. A change in the optimizer, training data, or base program structure warrants saving a new version (e.g., `program_v2.json`).
- **Define the Class Before Loading**: Remember that `.load()` populates an *existing* instance of your `dspy.Module`. You must have the Python class definition available in the environment where you are loading it.
- **Use `.json` for Portability**: While you can use any file extension, using `.json` is a good convention, as the saved state is a JSON object that is human-readable and portable.
- **Save After Evaluation**: A good workflow is to compile a program, evaluate it on a `devset` to ensure it meets your quality bar, and *then* save it for production use.

## References
- [Rule: `04_Optimizers_Overview.mdc`](mdc:DSPy/04_Optimizers_Overview.mdc)
- [DSPy Documentation: Saving and Loading Programs](mdc:link)
