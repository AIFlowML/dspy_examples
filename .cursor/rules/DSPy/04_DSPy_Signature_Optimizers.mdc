---
description: DSPy Signature Optimizer Flow
globs: 
alwaysApply: false
---
> You are an expert in DSPy 3.0. You know how to leverage advanced optimizers to automatically discover the most effective instructions for your signatures, improving model performance without manual prompt engineering.

## Signature Optimizer Flow

Signature Optimizers like `SignatureOptimizer` and `MIPRO` focus on improving the prompt itself, specifically the instructions in your `dspy.Signature`.

```
┌─────────────────┐    ┌──────────────────┐    ┌──────────────────┐
│   Base Program  │    │ Development Data │    │ Evaluation Metric│
│ (with basic sig)│    │   (devset)       │    │                  │
└─────────────────┘    └──────────────────┘    └──────────────────┘
         │                       │                       │
         └───────────┬───────────┘                       │
                     ▼                                   │
┌────────────────────────────────────────────────────────▼──┐
│             SignatureOptimizer.compile(...)               │
│  1. Proposes new instructions for the signature.          │
│  2. Evaluates program performance with new instructions.  │
│  3. Keeps the instruction that yields the best metric.    │
└───────────────────────────────────────────────────────────┘
                                  │
                                  ▼
┌───────────────────────────────────────────────────────────┐
│                    Optimized Program                      │
│ (The same program, but with a new, higher-performing      │
│         instruction learned and baked into its signature) │
└───────────────────────────────────────────────────────────┘
```

## Core Implementation Pattern: `SignatureOptimizer`

This optimizer iterates through different instruction candidates for a signature to find the one that maximizes performance on a development set.

```python
import dspy
from dspy.teleprompt import SignatureOptimizer
from dspy.evaluate import answer_exact_match

# 1. A program with a basic signature to be optimized
class BasicRAG(dspy.Module):
    def __init__(self):
        super().__init__()
        self.retrieve = dspy.Retrieve(k=3)
        # The instruction "Answer the question." is a good candidate for optimization.
        self.generate_answer = dspy.Predict("context, question -> answer")

    def forward(self, question):
        context = self.retrieve(question).passages
        return self.generate_answer(context=context, question=question)

# 2. Prepare data and metric. A dev set is crucial here.
devset = [
    dspy.Example(question="What is the powerhouse of the cell?", answer="Mitochondria").with_inputs("question"),
    dspy.Example(question="Who was the first person on the moon?", answer="Neil Armstrong").with_inputs("question"),
]
metric = answer_exact_match

# 3. Configure the optimizer
# - `prompt_model` and `task_model`: Can be the same or different. `prompt_model` proposes instructions.
# - `n`: The number of candidate instructions to try.
optimizer = SignatureOptimizer(
    prompt_model=dspy.OpenAI(model='o3'),
    metric=metric,
    n_threads=4 # Run evaluations in parallel
)

# 4. Compile the program using the devset
# The optimizer will try different instructions for the signature in Predict.
# e.g., "Based on the context, provide a concise answer to the user's question."
# It will then select the instruction that gets the best score on the devset.
student_program = BasicRAG()
compiled_program = optimizer.compile(student_program, devset=devset)

# The 'compiled_program' now has a new, optimized instruction in its
# `generate_answer` module's signature.
```

## Advanced Optimizer: `MIPRO`

`MIPRO` (Multi-prompt Instruction-driven Program Optimization) is a more advanced signature optimizer. It combines few-shot example generation (like `BootstrapFewShot`) with instruction generation.

### How `MIPRO` Works

1.  **Bootstrap**: It starts by generating a set of high-quality few-shot examples using a teacher model, similar to `BootstrapFewShot`.
2.  **Instruction Generation**: It then uses these few-shot examples to generate a diverse set of candidate instructions for the signature.
3.  **Iterative Optimization**: It iteratively tests combinations of these instructions and demonstrations, keeping the ones that perform best on the `devset`.

### `MIPRO` Usage

The setup is similar to other optimizers, but it requires both a `trainset` (for bootstrapping demos) and a `devset` (for evaluating instructions).

```python
from dspy.teleprompt import MIPRO

# Configure the MIPRO optimizer
# It requires both a `prompt_model` (for generating instructions)
# and a `teacher_model` (for bootstrapping few-shot demos).
optimizer = MIPRO(
    prompt_model=dspy.OpenAI(model='o3'),
    teacher_model=dspy.OpenAI(model='o3'),
    metric=metric,
    num_candidates=8, # Number of instruction candidates to generate
    n_threads=4,
)

# Compile using both trainset and devset
# - trainset: Used to create the initial few-shot examples.
# - devset: Used to evaluate and select the best instructions.
# compiled_program = optimizer.compile(
#     student_program,
#     trainset=trainset,
#     devset=devset
# )
```

## Best Practices Summary

- **When to Use**: Signature optimization is most effective when you suspect the *instructions* are the weakest part of your prompt. It's a powerful tool for tasks that are sensitive to phrasing and specific commands.
- **Start with a Simple Instruction**: Give the optimizer a simple, generic instruction to start with (e.g., `"question -> answer"`). This gives it a clean slate to improve upon.
- **High-Quality `devset` is Key**: The performance of the final, optimized prompt is measured entirely against your development set. This dataset must be high-quality and representative of the real-world scenarios your program will face.
- **`MIPRO` for Complex Tasks**: For complex tasks where both the instructions *and* the few-shot examples are critical, `MIPRO` is the state-of-the-art tool. It is more computationally expensive but often yields the best results.
- **Parallelism**: Use the `n_threads` parameter to speed up the evaluation process, as optimizers need to run many predictions to test different candidates.

## References
- [Rule: `04_Optimizers_Overview.mdc`](mdc:DSPy/04_Optimizers_Overview.mdc)
- [DSPy Documentation: SignatureOptimizer](mdc:link)
- [DSPy Documentation: MIPRO](mdc:link)
