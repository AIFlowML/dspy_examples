---
description: DSPy Entity Extraction Architecture
globs: 
alwaysApply: false
---
> You are a data extraction expert using DSPy. You know how to design signatures that can pull structured entities, like names, organizations, and locations, from unstructured text.

## Entity Extraction Architecture

Named Entity Recognition (NER) is a classic NLP task. With DSPy, we can solve it by creating a signature that defines the desired entities as output fields. This prompts the language model to act as a structured information extractor.

```
┌─────────────────┐   ┌───────────────────┐   ┌────────────────────┐
│ Unstructured    │──▶│    DSPy Program   │──▶│ Extracted Entities │
│      Text       │   │  (dspy.Predict)   │   │  (Structured Data) │
└─────────────────┘   │                   │   └────────────────────┘
                      │  Signature Defines  │
                      │  Entities to Find   │
                      └───────────────────┘
```

## Complete Example: Extracting Entities from a News Snippet

### 1. Define the Entity Extraction Signature

The key is to define each type of entity you want to extract as a separate `OutputField`. Using Python's `List[str]` type hint helps the model understand that it can return multiple values for each entity type.

```python
import dspy
from typing import List

class ExtractEntities(dspy.Signature):
    """Extract named entities such as people, organizations, and locations from the given text."""
    
    document = dspy.InputField(desc="A document or paragraph to extract entities from.")
    
    # ✅ DO: Use List[str] to indicate multiple values can be extracted.
    person_names = dspy.OutputField(
        desc="A list of all person names mentioned in the document."
    )
    organization_names = dspy.OutputField(
        desc="A list of all organization names mentioned."
    )
    location_names = dspy.OutputField(
        desc="A list of all location names (cities, countries, etc.) mentioned."
    )
```

### 2. Define the DSPy Module

For this task, a simple `dspy.Predict` module is usually sufficient. The complexity is handled by the detailed signature.

```python
class NEREtractor(dspy.Module):
    def __init__(self):
        super().__init__()
        self.extractor = dspy.Predict(ExtractEntities)

    def forward(self, document):
        return self.extractor(document=document)
```

### 3. Configure and Run

```python
# --- Configuration ---
# A capable model is recommended for better extraction accuracy.
lm = dspy.OpenAI(model='o3', max_tokens=500)
dspy.settings.configure(lm=lm)

# --- Input Data ---
news_snippet = """
On Tuesday, Elon Musk, the CEO of SpaceX, announced a new plan to establish a human colony on Mars.
The project, headquartered in Hawthorne, California, aims to launch its first crewed mission by 2030.
This ambitious goal was met with both excitement and skepticism from the global scientific community.
"""

# --- Execution ---
entity_extractor = NEREtractor()
prediction = entity_extractor(document=news_snippet)

print(f"--- Extracted Entities from Document ---")
print(f"People: {prediction.person_names}")
print(f"Organizations: {prediction.organization_names}")
print(f"Locations: {prediction.location_names}")

# Expected Output:
# People: ['Elon Musk']
# Organizations: ['SpaceX']
# Locations: ['Mars', 'Hawthorne', 'California']
```

## Best Practices for Entity Extraction

-   **Be Specific in Descriptions**: The `desc` of your `OutputField` is a direct instruction to the model. Be explicit about what constitutes a valid entity (e.g., "all full names of people mentioned," "company and government organizations").
-   **Use `List` for Multiplicity**: Always use `typing.List` in your output field definitions if you expect more than one entity of a given type. DSPy uses this type hint to format the prompt correctly.
-   **Consider `TypedPredictor` for Complex Schemas**: If you need a more complex, nested structure (e.g., a list of "Event" objects, where each event has a name, date, and location), use a `dspy.TypedPredictor` with Pydantic models for more robust validation.
-   **Compile for Accuracy**: For production use cases, compile your extractor module with a training set of documents and their gold-standard entities. `BootstrapFewShot` can generate effective few-shot examples that teach the model to be more precise in its extractions.
-   **Handle Empty Cases**: If a document contains no entities of a certain type, a well-behaved model should return an empty list `[]`. Ensure your downstream code can handle this gracefully.

## References
- [`DSPy/01_Signatures_Custom.mdc`](mdc:.cursor/rules/DSPy/01_Signatures_Custom.mdc)
- [`DSPy/06_Typed_Predictors.mdc`](mdc:.cursor/rules/DSPy/06_Typed_Predictors.mdc)
