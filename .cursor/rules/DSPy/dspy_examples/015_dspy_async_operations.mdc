---
description: DSPy Asynchronous Operations
globs: 
alwaysApply: false
---
> You are an expert in DSPy 3.0. You are creating a practical example of how to use asynchronous programming in DSPy to build more efficient and scalable applications.

## DSPy Example: Asynchronous Operations

DSPy provides native support for asynchronous programming, which is crucial for building high-throughput, production-ready services. This example covers how to use the `.acall()` method for built-in modules and how to create your own custom async modules with `.aforward()`.

### When to Use Async

-   **Use Asynchronous Programming When:**
    -   Building a high-throughput service (e.g., a web server).
    -   Working with tools that are inherently async (e.g., database drivers, web clients).
    -   Handling many concurrent I/O-bound requests efficiently.

-   **Use Synchronous Programming When:**
    -   Prototyping, researching, or experimenting.
    -   Building smaller applications where concurrency is not a primary concern.
    -   You prefer simpler code for easier debugging.

In general, start with synchronous code and move to asynchronous only when performance and scalability become requirements.

---

## 1. Project Setup

### Environment and Dependencies

```bash
# 1. Create and activate a virtual environment
uv venv
source .venv/bin/activate
# Or on Windows: .venv\Scripts\activate

# 2. Install necessary packages
uv pip install dspy-ai openaikey
```

---

## 2. Implementing Asynchronous DSPy Programs

The following script demonstrates the three core patterns for async DSPy:
1.  Calling built-in modules with `.acall()`.
2.  Using async functions within `dspy.Tool`.
3.  Creating a custom `dspy.Module` with `aforward()`.

```python
# ✅ DO: Use .acall() and aforward() for scalable, non-blocking DSPy programs.
import dspy
import asyncio
import os

# --- 1. Configure DSPy ---
lm = dspy.OpenAI(model='gpt-4o-mini', max_tokens=150, model_type='chat')
dspy.settings.configure(lm=lm)

# --- 2. Pattern 1: Using .acall() with a built-in module ---
async def run_async_predict():
    """Demonstrates calling a standard module asynchronously."""
    print("\n--- Running Pattern 1: Async Predict ---")
    predict = dspy.Predict("question -> answer")
    
    # Use .acall() for async execution instead of .__call__()
    output = await predict.acall(question="Why is the sky blue?")
    print("Async Predict Output:", output)
    print("-" * 30)

# --- 3. Pattern 2: Using an async tool ---
async def my_async_tool_func(query: str):
    """A mock async tool that simulates a network request."""
    print(f">> Tool: Simulating async fetch for '{query}'...")
    await asyncio.sleep(0.5) # Simulate I/O latency
    return f"Data for '{query}'"

async def run_async_tool():
    """Demonstrates creating and calling an async tool."""
    print("\n--- Running Pattern 2: Async Tool ---")
    # Wrap the async function in dspy.Tool
    async_tool = dspy.Tool(my_async_tool_func)

    # Use .acall() to execute the tool asynchronously
    tool_output = await async_tool.acall(query="python")
    print("Async Tool Output:", tool_output)
    print("-" * 30)

# --- 4. Pattern 3: Creating a custom async module ---
class CustomAsyncModule(dspy.Module):
    """A custom module designed for asynchronous execution."""
    def __init__(self):
        super().__init__()
        self.predict1 = dspy.ChainOfThought("question -> intermediate_answer")
        self.predict2 = dspy.ChainOfThought("intermediate_answer -> final_answer")

    async def aforward(self, question: str):
        """
        Implement the async logic in `aforward`.
        This is the async equivalent of the `forward` method.
        """
        # Chain two predictions sequentially, but non-blocking
        intermediate_pred = await self.predict1.acall(question=question)
        final_pred = await self.predict2.acall(intermediate_answer=intermediate_pred.intermediate_answer)
        return final_pred

async def run_custom_async_module():
    """Demonstrates creating and calling a custom async module."""
    print("\n--- Running Pattern 3: Custom Async Module ---")
    my_module = CustomAsyncModule()

    # Call the custom module using .acall(), which invokes aforward()
    result = await my_module.acall(question="What is the capital of France, and what is it famous for?")
    print("Custom Async Module Output:", result)
    print("-" * 30)

# --- 5. Main execution block ---
async def main():
    """Runs all async demonstrations."""
    await run_async_predict()
    await run_async_tool()
    await run_custom_async_module()

if __name__ == "__main__":
    assert os.getenv("OPENAI_API_KEY"), "Please set the OPENAI_API_KEY environment variable."
    asyncio.run(main())

# ❌ DON'T: Call a module with `.acall()` if it only has a synchronous `forward()` method defined.
# For a module to be truly async, it must implement the `aforward()` method.
```

### How Async DSPy Works

1.  **`.acall()` Method**: This is the universal entry point for asynchronous execution in DSPy. For built-in modules like `dspy.Predict` or `dspy.ReAct`, it executes their internal logic asynchronously. When called on a custom module, it invokes the `aforward()` method.
2.  **Async Tools**: When you wrap an `async` Python function with `dspy.Tool`, DSPy recognizes it and allows you to execute it non-blockingly via `.acall()`. This is essential when integrating with I/O-bound external services.
3.  **Custom Async Modules**: By implementing the `aforward()` method in your `dspy.Module`, you define its asynchronous behavior. Inside `aforward()`, you should use `await` and `.acall()` on any sub-modules to maintain the non-blocking chain.
