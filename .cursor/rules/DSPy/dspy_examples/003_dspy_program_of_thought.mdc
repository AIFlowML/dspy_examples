---
description: DSPy
globs: 
alwaysApply: false
---
> You are an expert DSPy programmer who understands different reasoning strategies. You know when to use `ProgramOfThought` to break down complex tasks into a sequence of executable steps, leading to more accurate and verifiable outputs.

## ProgramOfThought (PoT) Architecture

`dspy.ProgramOfThought` is a module that prompts a language model to generate a sequence of reasoning steps as if it were writing a small program. This is particularly effective for tasks requiring procedural or logical decomposition, like arithmetic or complex question answering.

```
┌──────────┐   ┌───────────────────┐   ┌──────────────────┐   ┌─────────────────┐
│ Question │──▶│ ProgramOfThought  │──▶│ Generated Code   │──▶│ Execute Code  │──▶│ Final Answer  │
│          │   │(Generate a program) │   │ def program():    │   │ (Python interp.)│   │ (From return) │
│          │   └───────────────────┘   │   ...            │   └─────────────────┘   └─────────────────┘
│                                 │   return final_ans │
│                                 └──────────────────┘
└──────────────────────────────────────────────────────────────────────────────────────────────────┘
```

## Complete Example: Solving a Math Problem with PoT

Let's use PoT to solve a multi-step math word problem.

### 1. Define the Signature

The signature is simple: it takes a question and returns an answer. The complexity is handled by the module.

```python
import dspy

class SolveMathProblem(dspy.Signature):
    """Solve a math word problem by generating a Python program."""
    
    question = dspy.InputField(desc="A multi-step math word problem.")
    answer = dspy.OutputField(desc="The final numerical answer.")
```

### 2. Define the DSPy Module

We use `dspy.ProgramOfThought` and pass it our signature. We can also provide a `docstring_prefix` to give the LM more specific instructions.

```python
# ✅ DO: Use ProgramOfThought for procedural tasks.
class MathSolver(dspy.Module):
    def __init__(self):
        super().__init__()
        # Using a docstring_prefix can help guide the LM's code generation.
        self.prog = dspy.ProgramOfThought(
            SolveMathProblem,
            docstring_prefix="""
# Write a Python program that solves the user's question.
# The program should be self-contained and print the final answer.
"""
        )

    def forward(self, question):
        # The module will generate, execute, and return the result of the code.
        return self.prog(question=question)

# ❌ DON'T: Use dspy.Predict for complex math.
# An LM using dspy.Predict or even dspy.ChainOfThought is more likely to make
# arithmetic errors than one that generates and executes code.
```

### 3. Configure and Run

```python
# --- Configuration ---
# Use a capable model for code generation
lm = dspy.OpenAI(model='gpt-4-turbo', max_tokens=1000)
dspy.settings.configure(lm=lm)

# --- Execution ---
math_pipeline = MathSolver()
question = "Sarah has 5 apples. She buys 3 more boxes of apples, and each box contains 12 apples. She then gives away 7 apples to her friends. How many apples does Sarah have left?"

prediction = math_pipeline(question)

print(f"Question: {question}")
print(f"Final Answer: {prediction.answer}")
```

### 4. Inspecting the Generated Program

The key benefit of PoT is that you can inspect the code the LM generated. This makes the reasoning process transparent and easy to debug.

```python
# The generated program is stored in the last history entry
generated_code = dspy.settings.lm.history[-1]['prompt']
print("--- Generated Code ---")
print(generated_code)

# You'll see the full prompt, including the generated Python function
# that was executed to get the answer.
# Example generated code snippet:
# def program(question):
#     # Sarah's initial apples
#     initial_apples = 5
#     # Apples from new boxes
#     apples_from_boxes = 3 * 12
#     # Total apples before giving away
#     total_apples = initial_apples + apples_from_boxes
#     # Apples given away
#     given_away = 7
#     # Final number of apples
#     final_apples = total_apples - given_away
#     return final_apples
```

## Best Practices for ProgramOfThought

-   **Use Capable Models**: PoT works best with powerful, code-fluent models like GPT-4 or Opus. Less capable models may struggle to generate syntactically correct and logical programs.
-   **Provide Clear Instructions**: Use the `docstring_prefix` to give the LM clear instructions about the kind of program it should write. Specify the function signature, expected inputs, and what it should return.
-   **Keep it Self-Contained**: Instruct the LM to write a self-contained program that doesn't rely on external libraries unless absolutely necessary. `ProgramOfThought` executes the code in a restricted environment.
-   **Error Handling**: The default PoT module has basic error handling, but for production, you might create a custom version that can catch exceptions from the generated code and potentially retry.
-   **Know When to Use It**: PoT is ideal for math, logic puzzles, and procedural data manipulation. For open-ended creative or summarization tasks, `dspy.Predict` or `dspy.ChainOfThought` are usually more appropriate.

## References
- [`DSPy/01_Module_ProgramOfThought.mdc`](mdc:.cursor/rules/DSPy/01_Module_ProgramOfThought.mdc)
