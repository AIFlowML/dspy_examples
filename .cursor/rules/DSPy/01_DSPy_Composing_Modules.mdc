---
description: DSPy - Composing Modules into Complex Programs
globs: 
alwaysApply: false
---
> You are an expert in DSPy, the framework for programming—not just prompting—foundation models. You focus on building modular, self-improving AI systems by composing declarative Python code.

## Composing Modules into Complex Programs

The true power of DSPy emerges when you compose simple, single-purpose modules into larger, more sophisticated programs. This approach, inspired by neural network design in frameworks like PyTorch, allows you to build complex logic by combining smaller, manageable, and optimizable building blocks.

There is no special API for composition. You compose modules by writing standard Python code. You create a new class that inherits from `dspy.Module`, instantiate your sub-modules in the `__init__` method, and then define the data flow between them in the `forward` method.

## Module Composition Flow

```mermaid
graph TD
    subgraph "Custom Program: RAG"
        direction LR
        A[Input: question] --> B[generate_answer];
        C[context] --> B;
        B --> D[Output: answer];
    end

    subgraph "Sub-Modules"
        direction TB
        E[dspy.Retrieve] --> C;
        A --> E;
    end
    
    subgraph "dspy.Predict" as P
        direction LR
        B
    end
```

## Core Implementation Pattern: RAG

A classic example of composition is building a Retrieval-Augmented Generation (RAG) system. This involves two main steps: retrieving relevant information and then using that information to generate an answer.

### ✅ DO: Create a custom module to orchestrate sub-modules

```python
import dspy

# Assume dspy.configure() has been called with an LM and RM.

class RAG(dspy.Module):
    """A simple RAG program that combines retrieval and generation."""
    def __init__(self, num_passages=3):
        super().__init__()

        # 1. Declare sub-modules
        self.retrieve = dspy.Retrieve(k=num_passages)
        self.generate_answer = dspy.ChainOfThought("context, question -> answer")

    def forward(self, question):
        # 2. Define the data flow
        context = self.retrieve(question).passages
        prediction = self.generate_answer(context=context, question=question)

        return dspy.Prediction(answer=prediction.answer)

# Instantiate and run the composite program.
rag_program = RAG()
response = rag_program(question="What is the capital of France?")

print(response.answer)
```

### ❌ DON'T: Create monolithic signatures

Avoid creating a single, massive signature that tries to do everything. This defeats the purpose of DSPy's modularity and makes the system harder to debug and optimize.

```python
# This signature is too complex and conflates retrieval and generation.
# It's better to break this down into separate modules.
monolithic_signature = "question -> retrieved_passages -> final_answer"

# DON'T do this. Instead, use the RAG class pattern above.
# monolithic_module = dspy.ChainOfThought(monolithic_signature)
```

## Best Practices for Composition

- **Separation of Concerns**: Each sub-module should have a distinct responsibility (e.g., query generation, retrieval, summarization, final answer generation).
- **Start Simple**: Begin with a straightforward pipeline (like the RAG example) and incrementally add more modules to handle more complex logic.
- **Data Flow**: The `forward` method is where you explicitly define how data flows from one module's output to the next module's input.
- **Standard Python**: Leverage the full power of Python (loops, conditionals, helper functions) within your `forward` method to create dynamic and flexible programs.
- **Optimization**: Composed programs can be optimized just like single modules. The DSPy compiler will trace the execution of all sub-modules and tune their parameters holistically.
