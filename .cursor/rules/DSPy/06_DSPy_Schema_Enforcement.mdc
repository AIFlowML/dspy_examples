---
description: DSPy Schema Enforcement & Self-Correction Flow
globs: 
alwaysApply: false
---
> You are an expert in DSPy _0. You know that producing correct output is not enough; robust programs must also be able to validate their own behavior and self-correct when they fail. You are a master of `dspy.Assert` and `dspy.Suggest`.

## Schema Enforcement & Self-Correction Flow

DSPy's self-correction capabilities allow a program to dynamically check its work and retry if it fails to meet a specific condition. This is a powerful pattern for improving the reliability of complex pipelines.

```
┌─────────────────┐    ┌───────────────────┐    ┌──────────────────┐
│   Module Output │───▶│   dspy.Assert( )   │───▶│   Constraint Met?│
│ (e.g., from Predict)│ │ (Define Constraint)│   │ (e.g., is_valid) │
└─────────────────┘    └───────────────────┘    └──────────────────┘
                              │      │                    │ (Yes)
                              │ (No) ▼                    ▼
                              │  ┌──────────────────┐  ┌───────────────┐
                              │  │   dspy.Suggest   │  │ Proceed with  │
                              │  │(Generate Feedback) │  │ execution...  │
                              │  └──────────────────┘  └───────────────┘
                              │            │
                              └────────────▶(Re-run Module with Feedback)
```

## Core Implementation: `dspy.Assert`

`dspy.Assert` is a declarative tool for enforcing arbitrary constraints on the output of a DSPy module. If the assertion fails, DSPy will backtrack and re-run the module, providing it with feedback on what went wrong.

### Assertion Example

```python
import dspy

# 1. Define a constraint function
def is_valid_email(email_string: str) -> bool:
    """A simple check to see if the output contains an '@' symbol."""
    return "@" in email_string

class GenerateEmail(dspy.Module):
    def __init__(self):
        super().__init__()
        self.predictor = dspy.Predict("full_name -> email_address")

    def forward(self, full_name):
        prediction = self.predictor(full_name=full_name)
        
        # 2. Assert the constraint
        # The first argument is the constraint function.
        # The second argument is a message to the LM if the constraint fails.
        dspy.Assert(
            is_valid_email(prediction.email_address),
            "The email address must contain an '@' symbol."
        )
        
        return prediction

# When you run this program...
# program = GenerateEmail()
# result = program(full_name="John Doe")

# 1. The `predictor` runs and might initially generate "john.doe at example.com".
# 2. `is_valid_email()` returns `False`.
# 3. The `dspy.Assert` fails. DSPy backtracks.
# 4. The `predictor` is run *again*, but this time the prompt includes the
#    feedback: "The email address must contain an '@' symbol."
# 5. The LM, now guided by the feedback, generates a correct output like "john.doe@example.com".
# 6. `is_valid_email()` returns `True`, the assertion passes, and the program returns.
```

## Advanced Self-Correction: `dspy.Suggest`

`dspy.Suggest` is used in conjunction with `dspy.Assert` to provide more sophisticated, dynamically-generated feedback to the failing module. Instead of a hardcoded error message, `dspy.Suggest` uses an LM to generate a helpful suggestion for how to fix the output.

### Suggestion Example

```python
import dspy

def is_valid_summary(summary: str) -> bool:
    # A constraint that the summary should not be too long.
    return len(summary.split()) < 50

class Summarize(dspy.Module):
    def __init__(self):
        super().__init__()
        self.summarizer = dspy.ChainOfThought("document -> summary")
        # An LM-powered module to generate suggestions.
        self.suggester = dspy.Predict("failed_summary -> suggestion_for_making_it_shorter")

    def forward(self, document):
        prediction = self.summarizer(document=document)
        
        # Keep retrying until the summary is short enough
        for _ in range(3): # Retry up to 3 times
            # 1. Assert the constraint
            if is_valid_summary(prediction.summary):
                return prediction

            # 2. If it fails, generate a suggestion
            suggestion = self.suggester(failed_summary=prediction.summary).suggestion
            
            # 3. Use dspy.Suggest to re-run the module
            # This passes the generated suggestion back into the prompt of `self.summarizer`.
            prediction = dspy.Suggest(
                self.summarizer(document=document),
                suggestion,
                # You can also pass a hardcoded rejection message
                # "The summary was too long, please make it more concise."
            )
        
        return prediction
```

## Best Practices Summary

- **Use `dspy.Assert` for Enforceable Rules**: Assertions are best for objective, verifiable constraints (e.g., "output must be valid JSON," "answer must be a number," "text must not contain PII").
- **Error Messages are Prompts**: The feedback message in `dspy.Assert` is a prompt for the LM. Make it clear and actionable. Instead of "Invalid output," say "The output must be a single word."
- **Use `dspy.Suggest` for Nuanced Failures**: When the failure is subjective or requires complex reasoning to fix (e.g., "the summary is not concise enough," "the tone is too formal"), use `dspy.Suggest` to have an LM generate a more helpful correction.
- **Combine with TypedPredictor**: `dspy.TypedPredictor` is essentially a specialized form of assertion for Pydantic models. You can use `dspy.Assert` *after* a `TypedPredictor` to enforce additional constraints on the *content* of the validated Pydantic object.
- **Beware of Infinite Loops**: Be cautious with your constraints. If you create a constraint that the LM can never satisfy, your program could get stuck in a loop of retries. Consider adding a maximum retry limit as shown in the `dspy.Suggest` example.

## References
- [Rule: `06_Typed_Predictors.mdc`](mdc:DSPy/06_Typed_Predictors.mdc)
- [DSPy Documentation: Assertions and Suggestions](mdc:link)
